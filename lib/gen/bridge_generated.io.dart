// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Value> api2wire_box_autoadd_value(Value raw) {
    final ptr = inner.new_box_autoadd_value_0();
    _api_fill_to_wire_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_value(
      Value apiObj, ffi.Pointer<wire_Value> wireObj) {
    _api_fill_to_wire_value(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_value(Value apiObj, wire_Value wireObj) {
    if (apiObj is Value_Int) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Value_Int();
      wireObj.kind.ref.Int.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Value_String) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Value_String();
      wireObj.kind.ref.String.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Value_ErrorValue) {
      var pre_field0 = api2wire_error_type(apiObj.field0);
      var pre_field1 = api2wire_String(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Value_ErrorValue();
      wireObj.kind.ref.ErrorValue.ref.field0 = pre_field0;
      wireObj.kind.ref.ErrorValue.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Value_Error) {
      var pre_field0 = api2wire_error_type(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_Value_Error();
      wireObj.kind.ref.Error.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Value_ConnectionType) {
      var pre_field0 = api2wire_connection_type(apiObj.field0);
      var pre_field1 = api2wire_String(apiObj.field1);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_Value_ConnectionType();
      wireObj.kind.ref.ConnectionType.ref.field0 = pre_field0;
      wireObj.kind.ref.ConnectionType.ref.field1 = pre_field1;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_send_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> file_name,
    ffi.Pointer<wire_uint_8_list> file_path,
    int code_length,
  ) {
    return _wire_send_file(
      port_,
      file_name,
      file_path,
      code_length,
    );
  }

  late final _wire_send_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Uint8)>>('wire_send_file');
  late final _wire_send_file = _wire_send_filePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_request_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> passphrase,
    ffi.Pointer<wire_uint_8_list> storage_folder,
  ) {
    return _wire_request_file(
      port_,
      passphrase,
      storage_folder,
    );
  }

  late final _wire_request_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_request_file');
  late final _wire_request_file = _wire_request_filePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_passphrase_uri(
    int port_,
    ffi.Pointer<wire_uint_8_list> passphrase,
    ffi.Pointer<wire_uint_8_list> rendezvous_server,
  ) {
    return _wire_get_passphrase_uri(
      port_,
      passphrase,
      rendezvous_server,
    );
  }

  late final _wire_get_passphrase_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_passphrase_uri');
  late final _wire_get_passphrase_uri = _wire_get_passphrase_uriPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_build_time(
    int port_,
  ) {
    return _wire_get_build_time(
      port_,
    );
  }

  late final _wire_get_build_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_build_time');
  late final _wire_get_build_time =
      _wire_get_build_timePtr.asFunction<void Function(int)>();

  void wire_new__static_method__TUpdate(
    int port_,
    int event,
    ffi.Pointer<wire_Value> value,
  ) {
    return _wire_new__static_method__TUpdate(
      port_,
      event,
      value,
    );
  }

  late final _wire_new__static_method__TUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_Value>)>>('wire_new__static_method__TUpdate');
  late final _wire_new__static_method__TUpdate =
      _wire_new__static_method__TUpdatePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_Value>)>();

  ffi.Pointer<wire_Value> new_box_autoadd_value_0() {
    return _new_box_autoadd_value_0();
  }

  late final _new_box_autoadd_value_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Value> Function()>>(
          'new_box_autoadd_value_0');
  late final _new_box_autoadd_value_0 = _new_box_autoadd_value_0Ptr
      .asFunction<ffi.Pointer<wire_Value> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<ValueKind> inflate_Value_Int() {
    return _inflate_Value_Int();
  }

  late final _inflate_Value_IntPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ValueKind> Function()>>(
          'inflate_Value_Int');
  late final _inflate_Value_Int =
      _inflate_Value_IntPtr.asFunction<ffi.Pointer<ValueKind> Function()>();

  ffi.Pointer<ValueKind> inflate_Value_String() {
    return _inflate_Value_String();
  }

  late final _inflate_Value_StringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ValueKind> Function()>>(
          'inflate_Value_String');
  late final _inflate_Value_String =
      _inflate_Value_StringPtr.asFunction<ffi.Pointer<ValueKind> Function()>();

  ffi.Pointer<ValueKind> inflate_Value_ErrorValue() {
    return _inflate_Value_ErrorValue();
  }

  late final _inflate_Value_ErrorValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ValueKind> Function()>>(
          'inflate_Value_ErrorValue');
  late final _inflate_Value_ErrorValue = _inflate_Value_ErrorValuePtr
      .asFunction<ffi.Pointer<ValueKind> Function()>();

  ffi.Pointer<ValueKind> inflate_Value_Error() {
    return _inflate_Value_Error();
  }

  late final _inflate_Value_ErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ValueKind> Function()>>(
          'inflate_Value_Error');
  late final _inflate_Value_Error =
      _inflate_Value_ErrorPtr.asFunction<ffi.Pointer<ValueKind> Function()>();

  ffi.Pointer<ValueKind> inflate_Value_ConnectionType() {
    return _inflate_Value_ConnectionType();
  }

  late final _inflate_Value_ConnectionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ValueKind> Function()>>(
          'inflate_Value_ConnectionType');
  late final _inflate_Value_ConnectionType = _inflate_Value_ConnectionTypePtr
      .asFunction<ffi.Pointer<ValueKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Value_Int extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_Value_String extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_Value_ErrorValue extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

final class wire_Value_Error extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_Value_ConnectionType extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

final class ValueKind extends ffi.Union {
  external ffi.Pointer<wire_Value_Int> Int;

  external ffi.Pointer<wire_Value_String> String;

  external ffi.Pointer<wire_Value_ErrorValue> ErrorValue;

  external ffi.Pointer<wire_Value_Error> Error;

  external ffi.Pointer<wire_Value_ConnectionType> ConnectionType;
}

final class wire_Value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ValueKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
