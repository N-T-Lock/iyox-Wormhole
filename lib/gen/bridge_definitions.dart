// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

part 'bridge_definitions.freezed.dart';

abstract class Native {
  Stream<TUpdate> sendFile(
      {required String fileName,
      required String filePath,
      required int codeLength,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendFileConstMeta;

  Stream<TUpdate> requestFile(
      {required String passphrase,
      required String storageFolder,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRequestFileConstMeta;

  Future<String> getPassphraseUri(
      {required String passphrase, String? rendezvousServer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPassphraseUriConstMeta;

  Future<BuildInfo> getBuildTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBuildTimeConstMeta;

  Future<TUpdate> newStaticMethodTUpdate(
      {required Events event, required Value value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodTUpdateConstMeta;
}

class BuildInfo {
  final int buildTime;
  final bool devBuild;
  final String version;

  const BuildInfo({
    required this.buildTime,
    required this.devBuild,
    required this.version,
  });
}

enum ConnectionType {
  Relay,
  Direct,
}

enum ErrorType {
  /// user passed invalid filepath
  InvalidFilename,

  /// no free filepath could be found
  NoFilePathFound,

  /// failed connecting to rendezvous server
  ConnectionError,

  /// error while requesting a file transfer
  FileRequestError,

  /// error while opening the receive file
  FileOpen,

  /// error during file transfer
  TransferError,

  /// error while connecting clients
  TransferConnectionError,
}

enum Events {
  /// Passphrase : String
  Code,

  /// Total bytes to transfer : i32
  Total,

  /// bytes already sent : i32
  Sent,

  /// error : Error or ErrorValue
  Error,

  /// transfer finished : String
  Finished,

  /// type of con : Connectiontype
  ConnectionType,

  /// indicate start of transaction : i32
  StartTransfer,
}

class TUpdate {
  final Native bridge;
  final Events event;
  final Value value;

  const TUpdate({
    required this.bridge,
    required this.event,
    required this.value,
  });

  static Future<TUpdate> newTUpdate(
          {required Native bridge,
          required Events event,
          required Value value,
          dynamic hint}) =>
      bridge.newStaticMethodTUpdate(event: event, value: value, hint: hint);
}

@freezed
class Value with _$Value {
  /// Integer value
  const factory Value.int(
    int field0,
  ) = Value_Int;

  /// String value
  const factory Value.string(
    String field0,
  ) = Value_String;

  /// Error value with message
  const factory Value.errorValue(
    ErrorType field0,
    String field1,
  ) = Value_ErrorValue;

  /// Plain error
  const factory Value.error(
    ErrorType field0,
  ) = Value_Error;

  /// Type of connection with corresponding ip/url
  const factory Value.connectionType(
    ConnectionType field0,
    String field1,
  ) = Value_ConnectionType;
}
