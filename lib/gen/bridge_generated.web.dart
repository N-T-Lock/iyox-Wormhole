// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_value(Value raw) {
    return api2wire_value(raw);
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_value(Value raw) {
    if (raw is Value_Int) {
      return [0, api2wire_i32(raw.field0)];
    }
    if (raw is Value_String) {
      return [1, api2wire_String(raw.field0)];
    }
    if (raw is Value_ErrorValue) {
      return [2, api2wire_error_type(raw.field0), api2wire_String(raw.field1)];
    }
    if (raw is Value_Error) {
      return [3, api2wire_error_type(raw.field0)];
    }
    if (raw is Value_ConnectionType) {
      return [
        4,
        api2wire_connection_type(raw.field0),
        api2wire_String(raw.field1)
      ];
    }

    throw Exception('unreachable');
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_send_file(NativePortType port_,
      String file_name, String file_path, int code_length);

  external dynamic /* void */ wire_request_file(
      NativePortType port_, String passphrase, String storage_folder);

  external dynamic /* void */ wire_get_passphrase_uri(
      NativePortType port_, String passphrase, String? rendezvous_server);

  external dynamic /* void */ wire_get_build_time(NativePortType port_);

  external dynamic /* void */ wire_new__static_method__TUpdate(
      NativePortType port_, int event, List<dynamic> value);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_send_file(NativePortType port_, String file_name, String file_path,
          int code_length) =>
      wasmModule.wire_send_file(port_, file_name, file_path, code_length);

  void wire_request_file(
          NativePortType port_, String passphrase, String storage_folder) =>
      wasmModule.wire_request_file(port_, passphrase, storage_folder);

  void wire_get_passphrase_uri(
          NativePortType port_, String passphrase, String? rendezvous_server) =>
      wasmModule.wire_get_passphrase_uri(port_, passphrase, rendezvous_server);

  void wire_get_build_time(NativePortType port_) =>
      wasmModule.wire_get_build_time(port_);

  void wire_new__static_method__TUpdate(
          NativePortType port_, int event, List<dynamic> value) =>
      wasmModule.wire_new__static_method__TUpdate(port_, event, value);
}
